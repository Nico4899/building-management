syntax = "proto3";

package edu.kit.tm.cm.proto;

option java_multiple_files = true;
option java_package = "edu.kit.tm.cm.proto";

service BuildingManagement {
  rpc GetBuilding(IN) returns (BuildingResponse);
  rpc GetRoom(IN) returns (RoomResponse);
  rpc GetComponent(IN) returns (ComponentResponse);

  rpc GetBuildings(Empty) returns (BuildingsResponse);
  rpc GetFilteredBuildings(FilterValuesRequest) returns (BuildingsResponse);
  rpc GetRooms(IN) returns (RoomsResponse);
  rpc GetComponents(IN) returns (ComponentsResponse);
  rpc GetNotifications(IN) returns (NotificationsResponse);
  rpc GetFavorites(Owner) returns (BuildingsResponse);

  rpc AddBuilding(BuildingRequest) returns (BuildingResponse);
  rpc AddRoom(RoomRequest) returns (RoomResponse);
  rpc AddComponent(ComponentRequest) returns (ComponentResponse);
  rpc AddFavorite(Owner) returns (Empty);
  // grpc nimmt nur einen param, später noch Building hinzufügen.
  // rpc AddFavorite(Owner, Building) returns (Empty);

  rpc UpdateBuilding(BuildingRequest) returns (BuildingResponse);
  rpc UpdateRoom(RoomRequest) returns (RoomResponse);
  rpc UpdateComponent(ComponentRequest) returns (ComponentResponse);

  rpc Delete(IN) returns (Empty);
}

message Empty {}

message IN {
  string in = 1;
}

message APIResponse {
  bool successful = 1;
  string message = 2;
}

message Building {
  string name = 1;
  string aoNumber = 2;
  int32 numFloors = 3;
  Position position = 4;
  Components components = 5;
  Notifications notifications = 6;
  CampusLocation campusLocation = 7;
  Rooms rooms = 8;
  IN bin = 9;
}

message BuildingRequest {
  Building building = 1;
}

message BuildingResponse {
  Building building = 1;
  APIResponse apiResponse = 2;
}

message Buildings {
  repeated Building buildings = 1;
}

message BuildingsResponse {
  Buildings buildings = 1;
  APIResponse apiResponse = 2;
}

message Room {
  string name = 1;
  string aoNumber = 2;
  int32 floor = 3;
  RoomCategory category = 4;
  Components components = 5;
  Notifications notifications = 6;
  IN rin = 7;
  IN parent = 8;
  Position position = 9;
}

message RoomRequest {
  Room room = 1;
}

message RoomResponse {
  Room room = 1;
  APIResponse apiResponse = 2;
}

message Rooms {
  repeated Room rooms = 1;
}

message RoomsResponse {
  Rooms rooms = 1;
  APIResponse apiResponse = 2;
}

message RoomCategory {
  enum RoomCategories {
    SPORTS = 0;
    CAFETERIA = 1;
    RESTROOM = 2;
    RESTROOM_HANDICAPPED = 3;
    OFFICE = 4;
    LECTURE_ROOM = 5;
    SEMINAR_ROOM = 6;
    LIBRARY = 7;
  }
}

message RoomCategories {
  repeated RoomCategory roomCategories = 1;
}

message Owner {
  string owner = 1;
}

message Position {
  int32 lon = 1;
  int32 lat = 2;
}

message CampusLocation {
  enum campus {
    SOUTH_CAMPUS = 0;
    NORTH_CAMPUS = 1;
    EAST_CAMPUS = 2;
    WEST_CAMPUS = 3;
  }
}

message CampusLocations {
  repeated CampusLocation locations = 1;
}

message Component {
  ComponentType componentType = 1;
  IN cin = 2;
  IN parent = 3;
  string description = 4;
  Notifications notifications = 5;
  Position position = 6;
}

message ComponentRequest {
  Component component = 1;
}

message ComponentResponse {
  Component component = 1;
  APIResponse apiResponse = 2;
}

message ComponentType {
  enum TypeOfComponent {
    RAMP = 0;
    ELEVATOR = 1;
  }
}

message ComponentTypes {
  repeated ComponentType componentTypes = 1;
}

message Components {
  repeated Component components = 1;
}

message ComponentsResponse {
  Components components = 1;
  APIResponse apiResponse = 2;
}

message Notification {
  string title = 1;
  string description = 2;
  Date date = 3;
  IN nin = 4;
  IN parent = 5;
}

message Notifications {
  repeated Notification notification = 1;
}

message NotificationsResponse {
  Notifications notifications = 1;
  APIResponse apiResponse = 2;
}

message Date {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
}

message FilterValues {
  oneof Values{
    CampusLocations campusLocations = 1;
    ComponentTypes componentTypes = 2;
    RoomCategories roomCategories = 3;
    string name = 4;
  }
}

message FilterValuesRequest {
  repeated FilterValues filterValues = 1;
}
